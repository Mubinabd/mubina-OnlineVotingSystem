// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/Party": {
            "get": {
                "description": "Endpoint for getting all Partys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Get All Partys",
                "parameters": [
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "opened_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted Partys",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetAllPartysResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Partys",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new Party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Create a new Party",
                "parameters": [
                    {
                        "description": "Party creation request payload",
                        "name": "Party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.PartyCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created Party",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create Party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/Party/:id": {
            "get": {
                "description": "Endpoint for getting Party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Get By Id Party",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted Party",
                        "schema": {
                            "$ref": "#/definitions/genproto.CandidateRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Endpoint for updating Party",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Update Party",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Party updaing request payload",
                        "name": "Party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.PartyCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Party",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update Party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting Party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Delete Party",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Party ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Party",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete Party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/candidate": {
            "post": {
                "description": "Endpoint for creating a new candidate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Create a new candidate",
                "parameters": [
                    {
                        "description": "Candidate creation request payload",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreateCandidateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created candidate",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/candidate/:id": {
            "get": {
                "description": "Endpoint for getting candidate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Get Candidate",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted candidate",
                        "schema": {
                            "$ref": "#/definitions/genproto.CandidateRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/candidate/all": {
            "get": {
                "description": "Endpoint for getting all candidates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Get All Candidates",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted candidates",
                        "schema": {
                            "$ref": "#/definitions/genproto.CandidatiesGetAllResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get candidates",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election": {
            "post": {
                "description": "Endpoint for creating a new election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Create a new election",
                "parameters": [
                    {
                        "description": "Election creation request payload",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreateElectionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created election",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/:id": {
            "get": {
                "description": "Endpoint for getting election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Get Election",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted election",
                        "schema": {
                            "$ref": "#/definitions/genproto.ElectionRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Delete election",
                "parameters": [
                    {
                        "description": "Election deleting request payload",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.GetByIdReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted election",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/all": {
            "get": {
                "description": "Endpoint for getting all public votes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public Vote"
                ],
                "summary": "Get All Public Votes",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted public Votes",
                        "schema": {
                            "$ref": "#/definitions/genproto.PublicVotesGetAllResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get public votes",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/update": {
            "put": {
                "description": "Endpoint for updating election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Update election",
                "parameters": [
                    {
                        "description": "Election updaing request payload",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.GetByIdReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated election",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public": {
            "get": {
                "description": "Endpoint for getting all publics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get All Publics",
                "parameters": [
                    {
                        "type": "string",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "nation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted publics",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetAllPublicsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get publics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Create a new public",
                "parameters": [
                    {
                        "description": "Public creation request payload",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.PublicCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created public",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/:id": {
            "get": {
                "description": "Endpoint for getting public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get By Id Public",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted public",
                        "schema": {
                            "$ref": "#/definitions/genproto.CandidateRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Endpoint for updating public",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Update public",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Public updaing request payload",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.PublicCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated public",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Delete public",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted public",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/publicvote": {
            "post": {
                "description": "Endpoint for creating a new publicvote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public Vote"
                ],
                "summary": "Create a new publicvote",
                "parameters": [
                    {
                        "description": "publicVote creation request payload",
                        "name": "publicvote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreatePublicVoteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created publicvote",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create publicvote",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "genproto.CandidateRes": {
            "type": "object",
            "properties": {
                "election": {
                    "$ref": "#/definitions/genproto.ElectionRes"
                },
                "id": {
                    "type": "string"
                },
                "public": {
                    "$ref": "#/definitions/genproto.PublicRes"
                }
            }
        },
        "genproto.CandidatiesGetAllResp": {
            "type": "object",
            "properties": {
                "candidaties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.CandidateRes"
                    }
                }
            }
        },
        "genproto.CreateCandidateReq": {
            "type": "object",
            "properties": {
                "election_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.CreateElectionReq": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "genproto.CreatePublicVoteReq": {
            "type": "object",
            "properties": {
                "candidate_id": {
                    "type": "string"
                },
                "election_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.ElectionRes": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "genproto.ElectionsGetAllResp": {
            "type": "object",
            "properties": {
                "elections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.ElectionRes"
                    }
                }
            }
        },
        "genproto.Filter": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "genproto.GetAllPartysResponse": {
            "type": "object",
            "properties": {
                "party": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.PartyRes"
                    }
                }
            }
        },
        "genproto.GetAllPublicsResponse": {
            "type": "object",
            "properties": {
                "public": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.PublicRes"
                    }
                }
            }
        },
        "genproto.GetByIdReq": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "genproto.PartyCreate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "genproto.PartyRes": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "genproto.PublicCreate": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                }
            }
        },
        "genproto.PublicRes": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "party": {
                    "$ref": "#/definitions/genproto.PartyRes"
                }
            }
        },
        "genproto.PublicVoteRes": {
            "type": "object",
            "properties": {
                "election": {
                    "$ref": "#/definitions/genproto.ElectionRes"
                },
                "id": {
                    "type": "string"
                },
                "public": {
                    "$ref": "#/definitions/genproto.PublicRes"
                }
            }
        },
        "genproto.PublicVotesGetAllResp": {
            "type": "object",
            "properties": {
                "publicvotes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.PublicVoteRes"
                    }
                }
            }
        },
        "genproto.Void": {
            "type": "object"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Online Voting System API",
	Description:      "API for managing online voting system resources",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
